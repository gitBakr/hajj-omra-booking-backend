const express = require('express');
const router = express.Router();
const Pelerin = require('../models/Pelerin');

// Configuration admin
const ADMIN_EMAIL = 'raouanedev@gmail.com';

// POST - Cr√©er un nouveau p√®lerin
router.post('/', async (req, res) => {
  try {
    console.log('üìù Donn√©es re√ßues:', req.body);
    
    // V√©rifier si l'email existe d√©j√†
    const existingPelerin = await Pelerin.findOne({ email: req.body.email });
    if (existingPelerin) {
      return res.status(400).json({ 
        message: `Un(e) p√®lerin(e) est d√©j√† enregistr√©(e) avec cet email.`
      });
    }

    const pelerin = new Pelerin(req.body);
    const savedPelerin = await pelerin.save();
    
    console.log('‚úÖ P√®lerin enregistr√©:', savedPelerin);
    res.status(201).json(savedPelerin);
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    res.status(400).json({ message: error.message });
  }
});

// GET - Rechercher les r√©servations par email
router.get('/search', async (req, res) => {
  try {
    const { email } = req.query;
    console.log('üîç Recherche pour email:', email);
    
    // Si c'est l'admin, renvoyer toutes les r√©servations
    if (email === ADMIN_EMAIL) {
      console.log('üëë Acc√®s administrateur d√©tect√©');
      const allReservations = await Pelerin.find().sort({ dateInscription: -1 });
      console.log('‚úÖ Nombre total de r√©servations:', allReservations.length);
      return res.json(allReservations);
    }
    
    // Sinon, renvoyer uniquement les r√©servations de l'utilisateur
    const reservations = await Pelerin.find({ email }).sort({ dateInscription: -1 });
    console.log('‚úÖ R√©servations trouv√©es:', reservations.length);
    
    res.json(reservations);
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche:', error);
    res.status(500).json({ message: error.message });
  }
});

// DELETE - Nettoyer la base de donn√©es (d√©veloppement uniquement)
router.delete('/clean', async (req, res) => {
  if (process.env.NODE_ENV === 'production') {
    return res.status(403).json({ message: 'Non autoris√© en production' });
  }
  
  try {
    await Pelerin.deleteMany({});
    console.log('üßπ Base de donn√©es nettoy√©e');
    res.json({ message: 'Donn√©es supprim√©es avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router; 